<head>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
  <style>
    body {
      background-color: #f8f9fa;
    }
    .alert {
      margin-top: 20px;
      transition: opacity 0.5s ease;
    }
    h2 {
      color: #007bff;
      margin-top: 20px;
    }
    .table {
      background-color: #ffffff;
    }
    .table-striped tbody tr:hover {
      background-color: #f1f1f1;
    }
    .form-control {
      border-radius: 5px;
    }
    .btn-primary {
      background-color: #007bff;
      border: none;
    }
    .btn-primary:hover {
      background-color: #0056b3;
    }
    .alert {
      display: none;
    }
    .spinner-border {
      display: none;
    }
  </style>
</head>

<body>
  <h1 class="text-center my-4">HR Dashboard</h1>

  <div class="container">

    <!-- Alert Section -->
    <div id="alertMessage" class="alert alert-success" role="alert">
      Promotion logged successfully!
    </div>
    <div id="errorMessage" class="alert alert-danger" role="alert"></div>

    <!-- Departments Section -->
    <div class="card mb-4">
      <div class="card-header">
        <h2>Departments</h2>
      </div>
      <div class="card-body">
        <table class="table table-striped">
          <thead class="thead-dark">
            <tr>
              <th>Department Name</th>
              <th>Employee Count</th>
            </tr>
          </thead>
          <tbody>
            {{#each departments}}
              <tr>
                <td>{{this.name}}</td>
                <td>{{this.employeeCount}}</td>
                <td>
                  {{!-- <button class="btn btn-danger" onclick="deleteDepartment('{{this._id}}')">Delete</button> --}}
                </td>
              </tr>
            {{/each}}
          </tbody>
        </table>
      </div>
    </div>

    <!-- Employees Section -->
    <div class="card mb-4">
      <div class="card-header">
        <h2>Employees</h2>
      </div>
      <div class="card-body">
        <table class="table table-striped">
          <thead class="thead-dark">
            <tr>
              <th>Employee Name</th>
              <th>Position</th>
              <th>Department</th>
              <th>Has Position</th>
            </tr>
          </thead>
          <tbody>
            {{#each employees}}
              <tr>
                <td>{{this.fullName}}</td>
                <td>{{this.position}}</td>
                <td>{{#if this.department}}{{this.department.name}}{{else}}N/A{{/if}}</td>
                <td>{{#if this.position}}Yes{{else}}No{{/if}}</td>
              </tr>
            {{/each}}
          </tbody>
        </table>
      </div>
    </div>

    <!-- Promotion Tracking Section -->
    <div class="card mb-4">
      <div class="card-header">
        <h2>Promotion Tracking</h2>
      </div>
      <div class="card-body">
        <table class="table table-striped">
          <thead class="thead-dark">
            <tr>
              <th>Employee Name</th>
              <th>Previous Position</th>
              <th>New Position</th>
              <th>Promotion Date</th>
            </tr>
          </thead>
          <tbody>
            {{#each promotions}}
              <tr>
                <td>{{this.employee.fullName}}</td>
                <td>{{this.previousPosition}}</td>
                <td>{{this.newPosition}}</td>
                <td>{{this.promotionDate}}</td>
              </tr>
            {{/each}}
          </tbody>
        </table>
      </div>
    </div>

    <!-- Add New Promotion -->
    <div class="card mb-4">
      <div class="card-header">
        <h3>Add New Promotion</h3>
      </div>
      <div class="card-body">
        <form id="addPromotionForm" onsubmit="addPromotion(event)">
          <div class="form-group">
            <label for="promotionEmployee">Select Employee:</label>
            <select id="promotionEmployee" class="form-control" required onchange="fetchCurrentPosition()">
              {{#each employees}}
                <option value="{{this._id}}">{{this.fullName}}</option>
              {{/each}}
            </select>
          </div>

          <div class="form-group">
            <label for="previousPosition">Previous Position:</label>
            <input type="text" id="previousPosition" class="form-control" placeholder="Previous Position" required readonly />
          </div>

          <div class="form-group">
            <label for="newPosition">New Position:</label>
            <input type="text" id="newPosition" class="form-control" placeholder="New Position" required />
          </div>

          <button type="submit" id="submitPromotion" class="btn btn-primary">Log Promotion</button>
          <div id="loadingSpinner" class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- JavaScript for Handling Forms -->
  <script>
    async function addPromotion(event) {
  event.preventDefault();

  console.log("Form submitted!"); // Debugging log
  const employeeId = document.getElementById('promotionEmployee').value;
  const previousPosition = document.getElementById('previousPosition').value;
  const newPosition = document.getElementById('newPosition').value;

  if (!newPosition) {
    displayError('New Position cannot be empty.');
    console.log("New position is empty!"); // Debugging log
    return;
  }

  try {
    console.log("Sending request to server..."); // Debugging log
    document.getElementById('loadingSpinner').style.display = 'inline-block';

    const response = await fetch('/promotion/create', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ employeeId, previousPosition, newPosition }),
    });

    if (response.ok) {
      const data = await response.json();
      console.log('Server Response:', data); // Debugging log
      displaySuccess(data.message || 'Promotion logged successfully!');
      document.getElementById('addPromotionForm').reset();
    } else {
      const errorText = await response.text();
      displayError(errorText || 'Failed to log promotion.');
      console.log('Error Response:', errorText); // Debugging log
    }
  } catch (error) {
    displayError('Network error. Please check the server status.');
    console.error('Network Error:', error); // Debugging log
  } finally {
    document.getElementById('loadingSpinner').style.display = 'none';
  }
}

    async function fetchCurrentPosition() {
      const employeeId = document.getElementById('promotionEmployee').value;

      try {
        const response = await fetch(`/employee/${employeeId}`);
        if (response.ok) {
          const employee = await response.json();
          document.getElementById('previousPosition').value = employee.position || 'N/A';
        } else {
          displayError('Error fetching employee position.');
        }
      } catch (error) {
        displayError('Network error fetching employee position.');
      }
    }

    function displaySuccess(message) {
      const alertMessage = document.getElementById('alertMessage');
      alertMessage.innerText = message;
      alertMessage.style.display = 'block';
      setTimeout(() => alertMessage.style.display = 'none', 3000);
    }

    function displayError(message) {
      const errorMessage = document.getElementById('errorMessage');
      errorMessage.innerText = message;
      errorMessage.style.display = 'block';
      setTimeout(() => errorMessage.style.display = 'none', 4000);
    }
  </script>
</body>
